//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]

namespace EWSNotifier.Logging
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class LogEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new LogEntities object using the connection string found in the 'LogEntities' section of the application configuration file.
        /// </summary>
        public LogEntities() : base("name=LogEntities", "LogEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LogEntities object.
        /// </summary>
        public LogEntities(string connectionString) : base(connectionString, "LogEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LogEntities object.
        /// </summary>
        public LogEntities(EntityConnection connection) : base(connection, "LogEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EventLog> EventLogs
        {
            get
            {
                if ((_EventLogs == null))
                {
                    _EventLogs = base.CreateObjectSet<EventLog>("EventLogs");
                }
                return _EventLogs;
            }
        }
        private ObjectSet<EventLog> _EventLogs;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EventLogs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEventLogs(EventLog eventLog)
        {
            base.AddObject("EventLogs", eventLog);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="LogModel", Name="EventLog")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EventLog : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new EventLog object.
        /// </summary>
        /// <param name="id">Initial value of the id property.</param>
        /// <param name="when">Initial value of the when property.</param>
        /// <param name="message">Initial value of the message property.</param>
        public static EventLog CreateEventLog(global::System.Guid id, global::System.DateTime when, global::System.String message)
        {
            EventLog eventLog = new EventLog();
            eventLog.id = id;
            eventLog.when = when;
            eventLog.message = message;
            return eventLog;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    OnidChanging(value);
                    ReportPropertyChanging("id");
                    _id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("id");
                    OnidChanged();
                }
            }
        }
        private global::System.Guid _id;
        partial void OnidChanging(global::System.Guid value);
        partial void OnidChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime when
        {
            get
            {
                return _when;
            }
            set
            {
                OnwhenChanging(value);
                ReportPropertyChanging("when");
                _when = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("when");
                OnwhenChanged();
            }
        }
        private global::System.DateTime _when;
        partial void OnwhenChanging(global::System.DateTime value);
        partial void OnwhenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String message
        {
            get
            {
                return _message;
            }
            set
            {
                OnmessageChanging(value);
                ReportPropertyChanging("message");
                _message = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("message");
                OnmessageChanged();
            }
        }
        private global::System.String _message;
        partial void OnmessageChanging(global::System.String value);
        partial void OnmessageChanged();

        #endregion
    
    }

    #endregion
    
}
